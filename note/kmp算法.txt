字符串匹配:
http://v.youku.com/v_show/id_XOTMyMjcxNzIw.html?from=s1.8-1-1.2
BF算法,最一般的暴力破解算法:
int BruteForceSearch(const char* s,const char * p){
    int i=0;    //当前匹配到的原始串首位
    int j=0;    //模式串的匹配位置
    int size=(int)strlen(s);
    int psize=(int)strlen(p);
    while((i<size) && (j<psize)){
        if(s[i-j]==p[j]){
            j++;
        }else{
            i++;
            j=0;    //暴力法最大问题在于j=0
        }
    }
    if(j>=psize){
        return i;
    }
    return -1;
}

kpm就是要改变j=0这一步
next函数:
void CalcNext(char* p,int next[]){
    int nLen=strlen(p);
    next[0]=-1;
    int k=-1;
    int j=0;
    while(j<nLen-1){
        //此刻,k即next[j-1],且p[k]表示前缀,p[j]表示后缀
        //注:k==-1表示未找到前缀与k后缀相等,首次分析可先忽略
        if(k==-1 || p[j]==p[k]){
            ++k;
            ++j;
            if(p[j]==p[k]){
                next[j]=next[k];
            }else{
                next[j]=k;
            }
        }else{  //p[j]与p[k]匹配失败,则继续递归前缀索引p[next[k]]
            k=next[k];
        }
    }
}

int KMP(int n){
    int ans=-1;
    int i=0;
    int j=0;
    int pattern_len=strlen(g_pattern);
    while(i<n){
        if(j==-1 || g_s[i]==g_pattern[j]){
            ++i;
            ++j;
        }else{
            j=g_next[j];
        }

        if(j==pattern_len){
            //找到结果
            ans=i-pattern_len;
            break;
        }
    }
    return ans;
}
